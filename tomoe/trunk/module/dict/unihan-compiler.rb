#!/usr/bin/env ruby

require 'uconv'

unihan_txt = ARGV.shift
base = ARGV.shift
split_size = Integer(ARGV.shift)

DO_NOT_EDIT_HEADER = <<-EOH
/*
  DO NOT EDIT!
  THIS FILE IS GENERATED BY Unihan.txt:
    ftp://ftp.unicode.org/Public/UNIDATA/Unihan.zip
*/
EOH

def parse_unihan_txt(unihan_txt)
  cache = "#{unihan_txt}.cache"
  if File.exists?(cache) and (File.mtime(cache) > File.mtime(unihan_txt))
    begin
      return Marshal.load(File.read(cache))
    rescue ArgumentError
    end
  end

  infos = {}
  File.open(unihan_txt).each do |line|
    case line
    when /^#/ #
      next
    when /^U\+([\da-fA-F]+)\s+([a-zA-Z_]+)\s*(.*)\s*$/
      ucs4 = $1
      key = $2
      value = $3

      infos[ucs4] ||= {}
      infos[ucs4][key] = value
    else
      STDERR.puts "Unknown line: #{line}"
    end
  end

  result = infos.collect do |ucs4, info|
    [ucs4, info]
  end.sort_by do |ucs4, info|
    ucs4
  end

  File.open(cache, "wb") {|f| f.print(Marshal.dump(result))}
  result
end

def generate_header(base, split_size, infos)
  header = "#{base}.h"
  block_macro = "__#{header.gsub(/[\.-]/, '_').upcase}__"

  File.open(header, "w") do |f|
    f.puts <<-EOH
/* -*- Mode: C; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
#{DO_NOT_EDIT_HEADER}

#ifndef #{block_macro}
#define #{block_macro}

#include <glib.h>

G_BEGIN_DECLS

GPtrArray *_tomoe_unihan_create (void);
EOH

    split_size.times do |i|
      f.puts("void       _tomoe_unihan_create#{i} (GPtrArray *array);")
    end

    f.puts <<-EOF

G_END_DECLS

#endif /*  #{block_macro} */

/*
vi:ts=4:nowrap:ai:expandtab
*/
EOF
  end
end

def generate_split_body(f, i, ucs4, info)
  utf8 = Uconv.u4tou8([Integer("0x#{ucs4}")].pack("I*"))

  f.puts <<-EOB
    chr = tomoe_char_new ();
    tomoe_char_set_utf8 (chr, "#{utf8}");
EOB

  n_strokes = info["kTotalStrokes"]
  f.puts "    tomoe_char_set_n_strokes (chr, #{n_strokes});" if n_strokes

  variant = info["kCompatibilityVariant"]
  if variant
    variant = variant.sub(/^U\+2?/, '')
    f.puts <<-EOB
    tomoe_char_set_variant (chr, "#{variant}");
EOB
  end

  kuns = info["kJapaneseKun"]
  if kuns
    kuns.split.each do |kun|
      f.puts <<-EOB
    reading = tomoe_reading_new (TOMOE_READING_JA_KUN, "#{kun}");
    tomoe_char_add_reading (chr, reading);
    g_object_unref (reading);
EOB
    end
  end

  ons = info["kJapaneseOn"]
  if ons
    ons.split.each do |on|
      f.puts <<-EOB
    reading = tomoe_reading_new (TOMOE_READING_JA_ON, "#{on}");
    tomoe_char_add_reading (chr, reading);
    g_object_unref (reading);
EOB
    end
  end

  f.puts <<-EOB
    array->pdata[#{i}] = chr;

EOB
end

def generate_split(base, chunk_index, base_index, infos)
  c_file = "#{base}#{chunk_index}.c"

  File.open(c_file, "w") do |f|
    f.puts <<-EOH
/* -*- Mode: C; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
#{DO_NOT_EDIT_HEADER}

#include "tomoe-unihan.h"

#include <tomoe-char.h>

void
_tomoe_unihan_create#{chunk_index} (GPtrArray *array)
{
    TomoeChar *chr;
    TomoeReading *reading;

    reading = NULL;

EOH

    infos.each_with_index do |(ucs4, info), i|
      generate_split_body(f, base_index + i, ucs4, info)
    end

    f.puts <<-EOF
}
EOF
  end
end

def generate_main(base, split_size, infos)
  main_file = "#{base}.c"

  chunk = infos.size / split_size
  split_size.times do |i|
    next_i = i + 1
    if next_i == split_size
      split_infos = infos[(i * chunk)..-1]
    else
      split_infos = infos[(i * chunk)...(next_i * chunk)]
    end
    generate_split(base, i, i * chunk, split_infos)
  end

  File.open(main_file, "w") do |f|
    f.puts <<-EOH
/* -*- Mode: C; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
#{DO_NOT_EDIT_HEADER}

#include "tomoe-unihan.h"

#include <tomoe-char.h>

GPtrArray *
_tomoe_unihan_create (void)
{
    GPtrArray *array;

    array = g_ptr_array_sized_new (#{infos.size});
    array->len = #{infos.size};

EOH

    split_size.times do |i|
      f.puts "    _tomoe_unihan_create#{i} (array);"
    end

    f.puts <<-EOF

    return array;
}
EOF
  end
end

infos = parse_unihan_txt(unihan_txt)
generate_header(base, split_size, infos)
generate_main(base, split_size, infos)
